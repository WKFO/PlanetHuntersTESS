#!/usr/bin/env python

# This script runs a basic transit search on 2-min cadence light curves

import numpy as np
from astropy.io import fits
from glob import glob
from scipy.signal import medfilt
from bls import BLS
from argparse import ArgumentParser
from os.path import isdir, dirname, basename, abspath, join

import matplotlib.pyplot as pl

try:
    from mpi4py import MPI
    comm = MPI.COMM_WORLD
    mpi_rank = comm.Get_rank()
    mpi_size = comm.Get_size()
    with_mpi = True
except ImportError:
    mpi_rank = 0
    mpi_size = 1
    with_mpi = False
 
mpi_root = 0
# np.seterr(all='ignore')

def main():
    ap = ArgumentParser()
    ap.add_argument('infod', type=str, help='LC file or directory')
    ap.add_argument('outf', type=str, help='Output file')
    ap.add_argument('--filter_width', type=float, default=0.5)
    ap.add_argument('--durations', type=str, default='0.05,0.1,0.2')
    ap.add_argument('--ffac', type=float, default=5.0)
    ap.add_argument('--min-ntr', type=int, default=2)
    ap.add_argument('--period-limits', type=str, default=None)

    args = ap.parse_args()
    
    sargs = {}
    sargs['durations'] = np.fromstring(args.durations, sep=',')
    if args.period_limits:
        pmin, pmax = np.fromstring(args.period_limits, count=2, sep=',')
        sargs['minimum_period'] = pmin
        sargs['maximum_period'] = pmax

    ## Master node
    ## -----------
    if mpi_rank == mpi_root:
        if isdir(args.infod):
            files = sorted(glob(join(args.infod,'tess*s_lc.fits')))
        else:
            files = [args.infod]
        nfiles = len(files)

        hdr_str = '{:>15s},{:>8s},{:>10s},{:>6s},{:>6s},{:>12s},{:>10s},{:>10s}'.format('TIC','per','t0','depth','dur','logL','SNR','sine_dlogL')
        with open(args.outf,'w') as f:
            f.write('{:s}\n'.format(hdr_str))

        ## Without MPI or running with a single node
        ## =========================================
        if (not with_mpi) or (mpi_size==1) or (nfiles==1):
            print 'processing {:d} LCs'.format(nfiles)
            for f in files:
                print 'processing TIC {}'.format(int(basename(f).split('-')[1]))
                run_bls_lc(f, args, sargs)

        else:
            ## Master node
            ## -----------
            if mpi_rank == 0:
                free_workers = range(1,mpi_size)
                active_workers = []
                n_finished_items = 0
                
                while files or active_workers:
                    ## Send a file
                    while files and free_workers:
                        w = free_workers.pop()
                        f = files.pop()
                        print 'Sending TIC {} to worker {}'.format(int(basename(f).split('-')[1]), w)
                        comm.send(f, dest=w, tag=0)
                        active_workers.append(w)
                        
                    ## Receive the results
                    for w in active_workers:
                        if comm.Iprobe(w, 2):
                            res = comm.recv(source=w, tag=2)
                            print 'Worker {} finished processing TIC {}'.format(w, res[0])
                            stri = '{:15d},{:8.5f},{:10.5f},{:6.2f},{:6.3f},{:12.3f},{:10.3f},{:10.3f}'.format(res[0],res[1],res[2],res[3],res[4],res[5],res[6],res[7])
                            with open(args.outf,'a') as f:
                                f.write('{:s}\n'.format(stri))
                            free_workers.append(w)
                            active_workers.remove(w)
                            n_finished_items += 1

                print 'Completed {} of {} files'.format(n_finished_items,nfiles)
                if n_finished_items < nfiles:
                    print 'Failed on {} files'.format(nfiles-n_finished_items) 
                for w in free_workers:
                    comm.send(-1, dest=w, tag=0)

    ## Worker node
    ## -----------
    else:
        while True:
            filename = comm.recv(source=mpi_root, tag=0)
            if filename == -1:
                break
            res = run_bls_lc(filename, args, sargs)
            comm.send(res, dest=mpi_root, tag=2)    

def run_bls_lc(lcf, args, sargs):
    with fits.open(lcf) as hdus:
        data = hdus[1].data
        t = data["TIME"]
        y = data["PDCSAP_FLUX"]
        q = data["QUALITY"]
    # remove bad data
    m = np.isfinite(t) & np.isfinite(y) & (q == 0)
    # for b in [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17]:
    #     m &= (q & (2 ** (b - 1))) == 0
    t = np.ascontiguousarray(t[m], dtype=np.float64)
    y = np.ascontiguousarray(y[m], dtype=np.float64)
    # normalise & convert to PPT
    y = (y / np.median(y) - 1)*1e3
    # detrend (12h median filter)
    dt = 2.0 / (24 * 60.)
    nmed = 2*int(args.filter_width/dt/2)+1
    trend = medfilt(y, nmed)
    mu = np.median(y)
    y_filt =(y - trend)
    # run BLS
    model = BLS(t, y_filt)
    if 'minimum_period' in sargs:
        results = model.autopower(sargs['durations'], 
                                  frequency_factor=args.ffac, 
                                  minimum_period = sargs['minimum_period'], 
                                  maximum_period = sargs['maximum_period'])
    else:
        results = model.autopower(sargs['durations'], 
                                  minimum_n_transit = args.min_ntr, 
                                  frequency_factor=args.ffac)
    # find best period
    imax = np.argmax(results.power)
    stats = model.compute_stats(results.period[imax], results.duration[imax], 
                                results.transit_time[imax])
    res = (int(lcf.split('-')[-3]), 
           results.period[imax], 
           results.transit_time[imax], 
           results.depth[imax], 
           results.duration[imax], 
           results.log_likelihood[imax], 
           results.depth_snr[imax], 
           stats['harmonic_delta_log_likelihood'])
    return res

if __name__ == '__main__':
    main()
